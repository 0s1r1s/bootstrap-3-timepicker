{"ts":1377953741296,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"describe('Keyboard events feature', function() {\n  'use strict';\n\n  var $input1,\n    $input2,\n    $input3,\n    $timepicker1,\n    $timepicker2,\n    $timepicker3,\n    tp1,\n    tp2,\n    tp3;\n\n  beforeEach(function () {\n    loadFixtures('timepicker.html');\n\n    $input1 = $('#timepicker1');\n    $timepicker1 = $input1.timepicker();\n    tp1 = $timepicker1.data('timepicker');\n\n    $input2 = $('#timepicker2');\n    $timepicker2 = $input2.timepicker({\n      template: 'modal',\n      showSeconds: true,\n      minuteStep: 30,\n      secondStep: 30,\n      defaultTime: false\n    });\n    tp2 = $timepicker2.data('timepicker');\n\n    $input3 = $('#timepicker3');\n    $timepicker3 = $input3.timepicker({\n      defaultTime: '23:15:20',\n      showMeridian: false,\n      showSeconds: true,\n      template: false\n    });\n    tp3 = $timepicker3.data('timepicker');\n  });\n\n  afterEach(function () {\n    $input1.data('timepicker').remove();\n    $input2.data('timepicker').remove();\n    $input3.data('timepicker').remove();\n    $input1.remove();\n    $input2.remove();\n    $input3.remove();\n  });\n\n  it('should be able to control element by the arrow keys', function() {\n    tp1.setTime('11:30 AM');\n    tp1.update();\n\n    $input1.trigger('focus');\n\n    if (tp1.highlightedUnit !== 'hour') {\n      tp1.highlightHour();\n    }\n\n    expect(tp1.highlightedUnit).toBe('hour', 'hour should be highlighted by default');\n    // hours\n    $input1.trigger({\n      'type': 'keydown',\n      'keyCode': 38 //up\n    });\n    expect(tp1.getTime()).toBe('12:30 PM', '1');\n    $input1.trigger({\n      'type': 'keydown',\n      'keyCode': 40 //down\n    });\n    expect(tp1.getTime()).toBe('11:30 AM', '2');\n    expect(tp1.highlightedUnit).toBe('hour', 'hour should be highlighted');\n\n    $input1.trigger({\n      'type': 'keydown',\n      'keyCode': 39 //right\n    });\n    expect(tp1.highlightedUnit).toBe('minute', 'minute should be highlighted');\n\n    //minutes\n    $input1.trigger({\n      'type': 'keydown',\n      'keyCode': 38 //up\n    });\n    expect(tp1.getTime()).toBe('11:45 AM', '3');\n    expect(tp1.highlightedUnit).toBe('minute', 'minute should be highlighted 1');\n\n    $input1.trigger({\n      'type': 'keydown',\n      'keyCode': 40 //down\n    });\n    expect(tp1.getTime()).toBe('11:30 AM', '4');\n    expect(tp1.highlightedUnit).toBe('minute', 'minute should be highlighted 2');\n\n    $input1.trigger({\n      'type': 'keydown',\n      'keyCode': 39 //right\n    });\n    expect(tp1.highlightedUnit).toBe('meridian', 'meridian should be highlighted');\n\n    //meridian\n    $input1.trigger({\n      'type': 'keydown',\n      'keyCode': 38 //up\n    });\n    expect(tp1.getTime()).toBe('11:30 PM', '5');\n    expect(tp1.highlightedUnit).toBe('meridian', 'meridian should be highlighted');\n\n    $input1.trigger({\n      'type': 'keydown',\n      'keyCode': 40 //down\n    });\n    expect(tp1.getTime()).toBe('11:30 AM', '6');\n    expect(tp1.highlightedUnit).toBe('meridian', 'meridian should be highlighted');\n\n    $input1.trigger({\n      'type': 'keydown',\n      'keyCode': 37 //left\n    });\n    expect(tp1.highlightedUnit).toBe('minute', 'minutes should be highlighted');\n\n    // minutes\n    $input1.trigger({\n      'type': 'keydown',\n      'keyCode': 40 //down\n    });\n    expect(tp1.getTime()).toBe('11:15 AM', '7');\n\n    $input1.trigger({\n      'type': 'keydown',\n      'keyCode': 37 //left\n    });\n    expect(tp1.highlightedUnit).toBe('hour', 'hours should be highlighted');\n\n    // hours\n    $input1.trigger({\n      'type': 'keydown',\n      'keyCode': 40 //down\n    });\n    expect(tp1.getTime()).toBe('10:15 AM', '8');\n\n    $input1.trigger({\n      'type': 'keydown',\n      'keyCode': 37 //left\n    });\n    expect(tp1.highlightedUnit).toBe('meridian', 'meridian should be highlighted');\n\n    // meridian\n    $input1.trigger({\n      'type': 'keydown',\n      'keyCode': 40 //down\n    });\n    expect(tp1.getTime()).toBe('10:15 PM', '9');\n  });\n\n  it('should be able to change time via widget inputs in a dropdown', function() {\n    var $hourInput = tp1.$widget.find('input.bootstrap-timepicker-hour'),\n        $minuteInput = tp1.$widget.find('input.bootstrap-timepicker-minute'),\n        $meridianInput = tp1.$widget.find('input.bootstrap-timepicker-meridian'),\n        eventCount = 0,\n        time;\n\n\n    tp1.setTime('9:30 AM');\n    tp1.update();\n    $input1.parents('div').find('.add-on').click();\n\n    $input1.timepicker().on('changeTime.timepicker', function(e) {\n      eventCount++;\n      time = e.time.value;\n    });\n\n    expect(tp1.isOpen).toBe(true);\n\n    $hourInput.trigger('focus');\n    $hourInput.autotype('{{back}}{{back}}11{{tab}}');\n\n    expect(tp1.hour).toBe(11);\n    expect(eventCount).toBe(1, 'incorrect update events thrown');\n    expect(time).toBe('11:30 AM');\n\n    $minuteInput.autotype('{{back}}{{back}}45{{tab}}');\n\n    expect(tp1.minute).toBe(45);\n    expect(eventCount).toBe(2, 'incorrect update events thrown');\n    expect(time).toBe('11:45 AM');\n\n    $meridianInput.autotype('{{back}}{{back}}pm{{tab}}');\n\n    expect(tp1.meridian).toBe('PM');\n    expect(eventCount).toBe(3, 'incorrect update events thrown');\n    expect(time).toBe('11:45 PM');\n  });\n\n  it('should still be empty if input is empty', function() {\n\t\t$input1.autotype('{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}{{tab}}');\n\n\t\texpect($input1.val()).toBe('');\n\t});\n  it('should allow time to be changed via widget inputs in a modal', function() {\n    //tp2.setTime('9:30 AM');\n    //tp2.update();\n    //$input2.parents('div').find('.add-on').click();\n\n    //var $hourInput = $('body').find('input.bootstrap-timepicker-hour'),\n        //$minuteInput = $('body').find('input.bootstrap-timepicker-minute'),\n        //$secondInput = $('body').find('input.bootstrap-timepicker-second'),\n        //$meridianInput = $('body').find('input.bootstrap-timepicker-meridian');\n\n    //$hourInput.autotype('{{back}}{{back}}2');\n    //$hourInput.trigger({\n      //'type': 'keydown',\n      //'keyCode': 9 //tab\n    //});\n\n    //expect(tp2.getTime()).toBe('02:30:00 AM');\n\n\n    //$minuteInput.autotype('{{back}}{{back}}0');\n    //$minuteInput.trigger({\n      //'type': 'keydown',\n      //'keyCode': 9 //tab\n    //});\n\n    //expect(tp2.getTime()).toBe('02:00:00 AM');\n\n    //$secondInput.autotype('{{back}}{{back}}30');\n    //$secondInput.trigger({\n      //'type': 'keydown',\n      //'keyCode': 9 //tab\n    //});\n\n    //expect(tp2.getTime()).toBe('02:00:30 AM');\n\n    //$meridianInput.autotype('{{back}}{{back}}p');\n    //$meridianInput.trigger({\n      //'type': 'keydown',\n      //'keyCode': 9 //tab\n    //});\n\n    //expect(tp2.getTime()).toBe('02:00:30 PM');\n  });\n\n  it('should be 12:00 AM if 00:00 AM is entered', function() {\n    //$input1.autotype('{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}0:0 AM');\n    //$input1.trigger({\n      //'type': 'keydown',\n      //'keyCode': 9 //tab\n    //});\n\n    //expect(tp1.getTime()).toBe('12:00 AM');\n  });\n\n  it('should validate input', function() {\n    //var $hourInput = tp1.$widget.find('input.bootstrap-timepicker-hour'),\n        //$minuteInput = tp1.$widget.find('input.bootstrap-timepicker-minute'),\n        //$meridianInput = tp1.$widget.find('input.bootstrap-timepicker-meridian'),\n        //$input3 = tp3.$element;\n\n        //tp1.setTime('11:30 AM');\n        //tp1.update();\n\n        //$hourInput.autotype('{{back}}{{back}}13');\n        //tp1.updateFromWidgetInputs();\n        //expect(tp1.getTime()).toBe('12:30 AM');\n\n        //$minuteInput.autotype('{{back}}{{back}}60');\n        //tp1.updateFromWidgetInputs();\n        //expect(tp1.getTime()).toBe('12:59 AM');\n\n        //$meridianInput.autotype('{{back}}{{back}}dk');\n        //tp1.updateFromWidgetInputs();\n        //expect(tp1.getTime()).toBe('12:59 AM');\n\n        //$meridianInput.autotype('{{back}}{{back}}p');\n        //tp1.updateFromWidgetInputs();\n        //expect(tp1.getTime()).toBe('12:59 PM');\n\n        //$input3.autotype('{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}{{back}}25:60:60');\n        //tp3.updateFromElementVal();\n        //expect(tp3.getTime()).toBe('23:59:59');\n  });\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":8073}]],"length":8073}
